}
MSE_matrix[i, j] = mean(MSE_vector)
}
}
install.packages("glmnet")
install.packages("ISLR")
## Loading req
## Loaded glmn
ibrary(ISLR)
# et oui
library(ISLR)
head(Hitters)
summary(Hitters)
size(Hitters)
length(Hitters)
Hitters.size()
dim(Hitters)
summary(Hitters)
dim(Hitters)
na_omit(Hitters)
na.omit(Hitters)
df = na.omit(Hitters)
A = 1
A = 1;
help(glmnet)
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
help(glmnet)
summary(df)
dim(df)
X = matrix(rep(c(0),263*17),nrow=263,ncol=17)
df$League = NULL
head(df)
X = matrix(rep(c(0),263*17),nrow=263,ncol=17)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
head(df)
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
head(df)
X = as.matrix(df)
X
print(X)
print(X)
print(dim(X))
print(dim(X))
print(dim(X))
print(X(0,:))
print(X[0,:])
print(X[1,:])
print(X[1:2,1:5])
ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
head(df)
X = as.matrix(df)
ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
head(df)
X = as.matrix(df)
ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
head(df)
X = as.matrix(df)
#ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
ridge.mod = glmnet(X,y,alpha = 0)
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
head(df)
X = as.matrix(df)
y = as.matrix(y)
#ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
ridge.mod = glmnet(X,y,alpha = 0)
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
y = df[,c("Salary")]
X= Hitters[,setdiff(names(hitters),cols)]
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
y = df[,c("Salary")]
X= df[,setdiff(names(hitters),cols)]
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
y = df[,c("Salary")]
X= df[,setdiff(names(df),cols)]
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
df$Salary = NULL
y = df[,c("Salary")]
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
df$Salary = NULL
y = df[,c("Salary")]
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
y = df[,c("Salary")]
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
df$Salary = NULL
head(df)
X = as.matrix(df)
y = as.matrix(y)
#ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
ridge.mod = glmnet(X,y,alpha = 0)
lasso.mod = glmnet(X,y,alpha = 1)
plot(ridge.mod,xvar = 'lambda', label = TRUE)
plot(lasso.mod,xvar = 'lambda', label = TRUE)
predictions = predict(lasso.mod,newx = X,type = 'response')
dg = copy(df)
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dg = df
dim(df)
y = df[,c("Salary")]
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
df$Salary = NULL
head(df)
X = as.matrix(df)
y = as.matrix(y)
#ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
ridge.mod = glmnet(X,y,alpha = 0)
lasso.mod = glmnet(X,y,alpha = 1)
plot(ridge.mod,xvar = 'lambda', label = TRUE)
plot(lasso.mod,xvar = 'lambda', label = TRUE)
predictions = predict(lasso.mod,newx = X,type = 'response')
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dg = df
dim(df)
y = df[,c("Salary")]
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
df$Salary = NULL
head(df)
X = as.matrix(df)
y = as.matrix(y)
#ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
ridge.mod = glmnet(X,y,alpha = 0)
lasso.mod = glmnet(X,y,alpha = 1)
plot(ridge.mod,xvar = 'lambda', label = TRUE)
plot(lasso.mod,xvar = 'lambda', label = TRUE)
predictions = predict(lasso.mod,newx = X,type = 'response')
BIC.crit = nrow(df) * log(colSums(predictions-dg$Salary)^2) + log(nrow(dg))*lasso.mod*df
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dg = df
dim(df)
y = df[,c("Salary")]
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
df$Salary = NULL
head(df)
X = as.matrix(df)
y = as.matrix(y)
#ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
ridge.mod = glmnet(X,y,alpha = 0)
lasso.mod = glmnet(X,y,alpha = 1)
plot(ridge.mod,xvar = 'lambda', label = TRUE)
plot(lasso.mod,xvar = 'lambda', label = TRUE)
predictions = predict(lasso.mod,newx = X,type = 'response')
BIC.crit = nrow(df) * log(colSums(predictions-dg$Salary)^2) + log(nrow(dg))*lasso.mod$df
BIC.crit = nrow(df) * log(colSums(predictions-dg$Salary)^2) + log(nrow(dg))*lasso.mod$df
0.3*263
X_test = X[1:80,1:16]
X_train = X[81:263,1:length(X$Hits)]
predictions = predict(lasso.mod,newx = X,type = 'response')
BIC.crit = nrow(df) * log(colSums(predictions-dg$Salary)^2) + log(nrow(dg))*lasso.mod$df
n =length(X$Hits)
predictions = predict(lasso.mod,newx = X,type = 'response')
BIC.crit = nrow(df) * log(colSums(predictions-dg$Salary)^2) + log(nrow(dg))*lasso.mod$df
X_test = X[1:80,1:16]
X_train = X[81:263,1:16]
X_test = X[1:80,1:16]
X_train = X[81:263,1:16]
y_test = y[1:80]
y_train = y[81:263]
l.mod.app = lm(Salary~,data = dg,subset = Iapp)
l.mod.app = lm(Salary~.,data = dg,subset = Iapp)
Iapp = 81:263
l.mod.app = lm(Salary~.,data = dg,subset = Iapp)
ridge.mod.app = cv.glmnet(X_train,y_train,alpha = 0)
lasso.mod.app = cv.glmnet(X_train,y_train,alpha = 1)
lasso.mod.tot = glmnet(X_train,y_train,alpha = 1)
ridge.mod.app = cv.glmnet(X_train,y_train,alpha = 0)
lasso.mod.app = cv.glmnet(X_train,y_train,alpha = 1)
lasso.mod.tot = glmnet(X_train,y_train,alpha = 1)
MCO.pred = cbind(rep(1,80),Xtest)
MCO_test1 = predict(lm.mod.app,newdata = as.data.frame(X_test))
MCO.pred = cbind(rep(1,81),Xtest)
MCO_test1 = predict(lm.mod.app,newdata = as.data.frame(X_test))
ridge.mod.app = cv.glmnet(X_train,y_train,alpha = 0)
lasso.mod.app = cv.glmnet(X_train,y_train,alpha = 1)
lasso.mod.tot = glmnet(X_train,y_train,alpha = 1)
MCO.pred = cbind(rep(1,79),Xtest)
MCO_test1 = predict(lm.mod.app,newdata = as.data.frame(X_test))
dim(X_test)
MCO.pred = cbind(rep(1,80),Xtest)
MCO.pred = cbind(rep(1,80),X_test)
MCO_test1 = predict(lm.mod.app,newdata = as.data.frame(X_test))
l.mod.app = lm(Salary~.,data = dg,subset = Iapp)
lm.mod.app = lm(Salary~.,data = dg,subset = Iapp)
MCO_test1 = predict(lm.mod.app,newdata = as.data.frame(X_test))
lm.mod.app = lm(Salary~.,data = df,subset = Iapp)
lm.mod.app = lm(Salary~.,data = dg,subset = Iapp)
MCO_test1 = predict(lm.mod.app,newdata = as.data.frame(X_test))
library(glmnet)
library(ISLR)
data("Hitters")
head(Hitters)
summary(Hitters)
dim(Hitters)
df = na.omit(Hitters)
dim(df)
y = df[,c("Salary")]
df$League = NULL
df$Division = NULL
df$NewLeague = NULL
dg = df
df$Salary = NULL
head(df)
X = as.matrix(df)
y = as.matrix(y)
#ridge.mod = glmnet(X, Dat$Salary,alpha = 1)
ridge.mod = glmnet(X,y,alpha = 0)
lasso.mod = glmnet(X,y,alpha = 1)
plot(ridge.mod,xvar = 'lambda', label = TRUE)
plot(lasso.mod,xvar = 'lambda', label = TRUE)
predictions = predict(lasso.mod,newx = X,type = 'response')
BIC.crit = nrow(df) * log(colSums(predictions-dg$Salary)^2) + log(nrow(dg))*lasso.mod$df
X_test = X[1:80,1:16]
X_train = X[81:263,1:16]
y_test = y[1:80]
y_train = y[81:263]
Iapp = 81:263
lm.mod.app = lm(Salary~.,data = dg,subset = Iapp)
ridge.mod.app = cv.glmnet(X_train,y_train,alpha = 0)
lasso.mod.app = cv.glmnet(X_train,y_train,alpha = 1)
lasso.mod.tot = glmnet(X_train,y_train,alpha = 1)
dim(X_test)
MCO.pred = cbind(rep(1,80),X_test)
MCO_test1 = predict(lm.mod.app,newdata = as.data.frame(X_test))
ylimites = range(c(MCO.pred,y_test))
plot(y_test,MCO.pred,pch = 16)
ridge.mod.app = cv.glmnet(X_train,y_train,alpha = 0)
lasso.mod.app = cv.glmnet(X_train,y_train,alpha = 1)
lasso.mod.tot = glmnet(X_train,y_train,alpha = 1)
dim(X_test)
MCO.pred = cbind(rep(1,80),X_test) %*% lm.mod.app$coefficients
MCO_test1 = predict(lm.mod.app,newdata = as.data.frame(X_test))
ylimites = range(c(MCO.pred,y_test))
plot(y_test,MCO.pred,pch = 16)
abline(c(0,1),col = 'red')
plot(cars)
Je suis en markdown
a  = 1
a  = 1
data(Hitters, package = "ISLR")
Hitters = na.omit(Hitters)
data(Hitters, package = "ISLR")
Hitters = na.omit(Hitters)
data(Hitters, package = "ISLR")
Hitters = na.omit(Hitters)
dim(Hitters)
data(Hitters, package = "ISLR")
Hitters = na.omit(Hitters)
dim(Hitters)
install.packages('caret')
library(carret)
library(caret)
install.packages('gg2plot')
library(caret)
library(caret)
data(Hitters, package = "ISLR")
Hitters = na.omit(Hitters)
dim(Hitters)
library(caret)
set.seed(42)
cv_5 = trainControl(method = "cv", number = 5)
cv_5 = trainControl(method = "cv", number = 5)
hit_elnet = train(
Salary ~ ., data = Hitters,
method = "glmnet",
trControl = cv_5
)
hit_elnet
hit_elnet_int = train(
Salary ~ . ˆ 2, data = Hitters,
hit_elnet_int = train(
Salary ~ . ˆ 2, data = Hitters,
hit_elnet_int = train(
Salary ~ .ˆ2, data = Hitters,
method = "glmnet",
trControl = cv_5,
tuneLength = 10
)
hit_elnet_int = train(
Salary ~ ., data = Hitters,
method = "glmnet",
trControl = cv_5,
tuneLength = 10
)
hit_elnet_int = train(
Salary ~ . ^ 2, data = Hitters,
method = "glmnet",
trControl = cv_5,
tuneLength = 10
)
data(Hitters, package = "ISLR")
Hitters = na.omit(Hitters)
dim(Hitters)
library(caret)
set.seed(42)
cv_5 = trainControl(method = "cv", number = 5)
hit_elnet = train(
Salary ~ ., data = Hitters,
method = "glmnet",
trControl = cv_5
)
hit_elnet
hit_elnet_int = train(
Salary ~ . ^ 2, data = Hitters,
method = "glmnet",
trControl = cv_5,
tuneLength = 10
)
hit_elem_int
hit_elnet_int
install.packages("leaps","tidyverse","pbmcapply","mvtnorm")
install.packages("leaps")
install.packages(tidyverse")"
install.packages("tidyverse")
install.packages("pbmcapply")
install.packages("mvtnorm")
library(pbmcapply)
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
library(mvtnorm)
source("~/MGD/TP3 correction.R", echo=TRUE)
source("~/MGD/TP3 correction.R", echo=TRUE)
source("~/MGD/TP3 correction.R", echo=TRUE)
install.packages("glmnet")
install.packages("glmnet")
source("~/MGD/TP3 correction.R", echo=TRUE)
source("~/MGD/TP3 correction.R", echo=TRUE)
source("~/MGD/TP3 correction.R", echo=TRUE)
source("~/MGD/TP3 correction.R", echo=TRUE)
help(regsubsets)
help(regsubsets)
data(mdvis)
install.packages('count')
install.packages('COUNT')
library(COUNT)
library(COUNT)
data(mdvis)
View(mdvis)
View(mdvis)
View(mdvis)
View(res)
View(mdvis)
# Charger la bibliothèque COUNT et les données mdvis
library(COUNT)
data(mdvis)
# Enregistrer le tableau mdvis au format CSV avec les noms de colonnes
write.csv(mdvis, file = "mdvis.csv", row.names = FALSE, col.names = TRUE)
# Charger la bibliothèque COUNT et les données mdvis
library(COUNT)
data(mdvis)
# Enregistrer le tableau mdvis au format CSV avec les noms de colonnes
write.csv(mdvis, file = "mdvis.csv", row.names = FALSE, col.names = TRUE)
library(COUNT)
data(mdvis)
# Extraire les noms de colonnes
col_names <- colnames(mdvis)
# Enregistrer le tableau mdvis au format CSV avec les noms de colonnes
write.csv(mdvis, file = "mdvis.csv", row.names = FALSE)
# Lire le fichier CSV avec les noms de colonnes
write.table(mdvis, file="mdvis.csv", sep=",", col.names=col_names, row.names=FALSE)
setwd("~/Projet 3A")
library(COUNT)
data(mdvis)
# Extraire les noms de colonnes
col_names <- colnames(mdvis)
# Enregistrer le tableau mdvis au format CSV avec les noms de colonnes
write.csv(mdvis, file = "mdvis.csv", row.names = FALSE)
# Lire le fichier CSV avec les noms de colonnes
write.table(mdvis, file="mdvis.csv", sep=",", col.names=col_names, row.names=FALSE)
